<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd">

		<!-- 配置自动扫描的包 -->
		<context:component-scan base-package="com.echo">
			<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
			<context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
		</context:component-scan>
	
		<!-- 配置数据源 -->
		<!-- 
		<context:property-placeholder location="classpath:db.properties"/>
		 -->
		<bean class="com.echo.utils.EncryptPropertyPlaceholderConfigurer" p:location="classpath:db.properties" p:fileEncoding="utf-8"></bean>
		<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
			<property name="user" value="${jdbc.user}"></property>
		    <property name="password" value="${jdbc.password}"></property>
		    <property name="driverClass" value="${jdbc.driverClass}"></property>
		    <property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
		    <property name="initialPoolSize" value="${jdbc.initialPoolSize}"></property>
		    <property name="maxPoolSize" value="${jdbc.maxPoolSize}"></property>
		    <property name="minPoolSize" value="${jdbc.minPoolSize}"></property>
		    <property name="acquireIncrement" value="${jdbc.acquireIncrement}"></property>
		    <property name="maxIdleTime" value="${jdbc.maxIdleTime}"></property>
		</bean>
		
		<!-- 配置验证码 -->
		<bean id="captchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">  
        <property name="config">  
            <bean class="com.google.code.kaptcha.util.Config">  
                <constructor-arg>  
                    <props>  
                        <prop key="kaptcha.border">no</prop>  
                        <prop key="kaptcha.textproducer.font.color">3,169,244</prop>  
                        <prop key="kaptcha.image.width">125</prop>  
                        <prop key="kaptcha.image.height">45</prop>  
                        <prop key="kaptcha.textproducer.font.size">30</prop>  
                        <prop key="kaptcha.session.key">code</prop>  
                        <prop key="kaptcha.noise.color">black</prop>
                        <prop key="kaptcha.textproducer.char.length">4</prop>  
                        <prop key="kaptcha.textproducer.font.names">微软雅黑</prop>  
                    </props>  
                </constructor-arg>  
            </bean>  
        </property>  
    </bean>
	
	
		<!-- 配置Hibernate的SessionFactory实例:通过Spring提供的LocalSessionFactoryBean进行配置 -->
		<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
			<property name="dataSource" ref="dataSource"></property>
			<property name="configLocation" value="classpath:hibernate.cfg.xml"></property>
			<property name="mappingLocations" value="classpath:hbm/*.hbm.xml"></property>
		</bean>
		
		
		<!-- 配置Spring的声明式事务 -->
		<!-- 配置事务管理器 -->
		<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
			<property name="dataSource" ref="dataSource"></property>
		</bean>
		
		<!-- 配置事务属性，需要事务管理器 -->
		 <tx:advice id="txAdvice" transaction-manager="transactionManager">
		 	<tx:attributes>
		 		<tx:method name="get*" read-only="true"/>
		 		<tx:method name="*"/>
		 	</tx:attributes>
		 </tx:advice>
		
		 <!-- 配置事务切点，并把切点和事务属性关联起来 -->
		<aop:config>
			<aop:pointcut expression="execution(* com.echo.service.*.*.*(..))" id="txPointcut"/>
			<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
		</aop:config>
		
		<!-- proxy-target-class属性值决定是基于接口的还是基于类的代理被创建。如果proxy-target-class 属性值被设置为true，那么基于类的代理将起作用。 -->
		<aop:config proxy-target-class="true"/>
		
		
	</beans>
